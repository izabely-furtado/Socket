{
  "name": "Socket",
  "tagline": "Um chat utilizando sockets.",
  "body": "# Relatório\r\n\r\n## Motivações\r\n\r\nO processo de utilização sockets em um programa para que haja comunicação contém processos bloqueantes, caso este programa esteja em apenas um fluxo de execução. Essas chamadas bloqueantes são chamadas de leitura.\r\n\r\nAs chamadas de leitura esperam uma resposta \r\n* onde o servidor, por exemplo se paralisa naquele trecho de código até que alguma resposta seja emitida do lado do cliente, caso esse cliente nunca mande uma mensagem, isso pode causar um deadlock.\r\n* Agora suponhamos que o cliente mandou uma mensagem, a partir desse momento, este precisa esperar de uma resposta do servidor indicando que a mensagem foi enviada com sucesso, antes disso, não pode haver o envio de outra mensagem\r\n\r\n### Threads e vários clientes\r\n\r\nCriando vários fluxos de execução e deixando pelo ou menos uma thread responsável somente pela leitura, essa chamada deixa de bloquear o programa como um todo. Assim, caso o cliente queira enviar N mensagens, essas vão ser processadas por outras threads.\r\n\r\nAlém de evitar o deadlock a criação de threads pode colaborar para a criação de uma sala virtual com 10 clientes, por exemplo, onde nenhum destes estaria bloqueado de enviar ou receber mensagens, dado que tanto servidor, quanto no cliente o programa segue executando em paralelo as funções de **Read** e **Write**.\r\n\r\n## Modificações\r\n\r\n### Use uma thread adicional\r\n\r\nPara que se elabore um programa em que o número de mensagens enviada por um dos usuários seja independente do número de mensagens enviada pelo outro o processo é o seguinte: usa-se uma thread a mais para processar a leitura. Dado assim a cada thread um objetivo.\r\n\r\n`\r\n\r\n//criando threads\r\nvoid CriaThread(int sockfd) {\r\n\tint i, k;\r\n\t//int nProc = get_nprocs();\r\n\tint nProc = 2;\r\n\r\n\t//criando vetor de threads\r\n\tthreads[nProc] = (pthread_t *) malloc(nProc * sizeof (pthread_t));\r\n\r\n\t//dando a cada thread um objetivo\r\n\t\r\n\tpthread_create(&(threads[0]), NULL, &Read, sockfd);\r\n\tpthread_create(&(threads[i]), NULL, &Write, sockfd);\r\n\t\r\n\t//mandando bala\r\n\tfor (k = 0; k < nProc; k++) {\r\n\t\tpthread_join(threads[k], NULL);\r\n\t}\r\n}\r\n\r\n`\r\n\r\n### 10 Clientes\r\n\r\n**No servidor**\r\n\r\n`\r\n\r\n//criando threads\r\nvoid CriaThread(int newsockfd) {\r\n\tint i, k;\r\n\t//int nProc = get_nprocs();\r\n\tint nProc = 11;\t\t//10 clientes para ler msg e um para enviar resposta\r\n\r\n\t//criando vetor de threads\r\n\tthreads[nProc] = (pthread_t *) malloc(nProc * sizeof (pthread_t));\r\n\r\n\t//dando a cada thread um objetivo\r\n\tpthread_create(&(threads[0]), NULL, &Write, newsockfd)\r\n\t\r\n\tfor (i = 1; i < nProc; i++) {\r\n\t\tpthread_create(&(threads[i]), NULL, &Read, newsockfd);\r\n\t}\r\n\t\r\n\t//mandando bala\r\n\tfor (k = 0; k < nProc; k++) {\r\n\t\tpthread_join(threads[k], NULL);\r\n\t}\r\n}\r\n\r\n\r\n`\r\n\r\n\r\n\r\n\r\n**No Cliente**\r\n\r\n`\r\n\r\n//criando threads\r\nvoid CriaThread(int sockfd) {\r\n\tint i, k;\r\n\t//int nProc = get_nprocs();\r\n\tint nProc = 11;\t\t//10 clientes e um para ler msgs do servidor\r\n\r\n\t//criando vetor de threads\r\n\tthreads[nProc] = (pthread_t *) malloc(nProc * sizeof (pthread_t));\r\n\r\n\t//dando a cada thread um objetivo\r\n\t\r\n\tpthread_create(&(threads[0]), NULL, &Read, sockfd);\r\n\t\r\n\tfor (i = 1; i < nProc; i++) {\r\n\t\tpthread_create(&(threads[i]), NULL, &Write, sockfd);\r\n\t}\r\n\t\r\n\t//mandando bala\r\n\tfor (k = 0; k < nProc; k++) {\r\n\t\tpthread_join(threads[k], NULL);\r\n\t}\r\n}\r\n\r\n`\r\n\r\n\r\n\r\n## Servidor\r\n\r\n### Read\r\n\r\n### Write\r\n\r\n## Cliente\r\n\r\n### Write\r\n\r\n### Read\r\n\r\n## Main",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}